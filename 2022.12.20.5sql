SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME, R_CONSTRAINT_NAME, STATUS
FROM user_constraints WHERE TABLE_NAME='DEPT01';

SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME, R_CONSTRAINT_NAME, STATUS
FROM user_constraints WHERE TABLE_NAME='EMP01';

SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME, R_CONSTRAINT_NAME, STATUS
FROM user_constraints WHERE TABLE_NAME IN ('DEPT01','EMP01');

SELECT * from EMP01;
SELECT * from DEPT01;

-- DEPT01 테이블의 기본키를 비활성화 한다.

ALTER TABLE DEPT01
DISABLE PRIMARY KEY;
-- DEPT01 테이블의 기본키는 EMP01테이블의 외래키에서 참조하고 있기 때문에
-- 제약조건을 비활성화 할 수 없다.
ALTER TABLE EMP01
DISABLE PRIMARY KEY;

-- 부모테이블과 자식테이블을 동시에 비활성화
ALTER TABLE DEPT01
DISABLE PRIMARY KEY CASCADE;
ROLLBACK;

-- 부모테이블과 자식테이블을 동시에 비활성화
ALTER TABLE EMP01
DISABLE PRIMARY KEY;

ALTER TABLE DEPT01
DROP PRIMARY KEY CASCADE;
ROLLBACK;

/*
 조인
 - 한 개 이상의 테이블에서 원하는 결과를 얻기 위한 방법
 
   Equi Join       : 동일한 컬럼을 기준으로 조인한다.
   Non Equi Join   : 동일한 컬럼이 없이 다른 조건을 사용하여 조인
   Outer Join      : 조인 조건에 만족하지 않는 행도 나타난다.
   Self Join       : 한 테이블 내에서 조인한다.
   emp a, emp b
*/

SELECT ENAME , DNAME FROM EMP01,DEPT01 WHERE emp01.deptno=dept01.deptno;

-- Non Equi Join은 조인할 테이블 사이에 컬럼의 값이 직접적으로 일치하지 않을 시
-- 사용하는 조인으로 '='을 제외한 연산자를 사용한다.

SELECT * from salgrade;
SELECT * from emp01;

SELECT E.ENAME, E.SAL, S.GRADE FROM EMP E, salgrade S --별칭정할때는 FROM뒤에서 해준다
WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL;

-- Outer Join  : 행이 조인 조건에 만족하지 않을 경우 그 행은 결과에 
--               나타나지 않게 된다 이때 조인 조건에 만족하지 않는 
--               행들도 나타나게함

SELECT * from dept01;

SELECT e.ename, d.deptno, d.dname
FROM EMP E, DEPT D
where e.deptno(+)=d.deptno;

-- 특정 사원을 담당하는 매니저 사원의 이름을 출력
SELECT ename, mgr from emp;

SELECT work.ename"사원", manager.ename "매니저"
from emp work, emp manager
WHERE work.mgr=manager.empno;

/*
서브쿼리
 서브쿼리는 하나의 select 문장의 절 안에 포함된 또하나의 select문을 의미한다.
 메인(주), 서브(부)
*/

-- scott의 부서명을 알아보려고한다.
SELECT deptno from emp where ename='SCOTT';

-- 부서번호가 20번이면 부서이름을 알아 낼수 있다.
SELECT dname from dept;

SELECT dname FROM dept where deptno=20;

SELECT dname from dept where deptno=(-- 메인 쿼리
SELECT deptno from emp where ename='SCOTT'); -- 서브 쿼리

/*
단일행 서브쿼리 : 내부 select문장으로부터 오직 하나의 행만을 반환한다
               사용 연산자 : 비교연산자 사용(>(작다),<(크다),<==(크거나같다),>=(작거나같다),=(같다),!=(같지않다)<>)
다중행 서브쿼리 : 서브쿼리에서 반환하는 결과가 하나 이상의 행일때를 의미함
               사용 연산자 : IN(||), (ANY, SOME(여러개의 값중 하나만 맞아도 참)), ALL(&&) , EXIST()
*/

/*
IN 연산자

급여를 3000이상 받는 사원이 소속된 부서와 동일한부서에서 근무하는 사원을 출력하시오.
*/

SELECT DISTINCT(deptno) deptno from emp where sal > = 3000;
SELECT ename, sal, deptno from emp;
-- 서브 쿼리
SELECT ename, sal, deptno from emp where deptno in(SELECT DISTINCT(deptno) deptno from emp where sal > = 3000);

/*
ALL 연산자 : 메인 쿼리의 비교 조건이 서브쿼리의 검색결과와 모든 값이 일치하면 참

 30번 소속 사원들 중에서 급여를 가장 많이 받는 사원보다 더 많은 급여를 받는 사원의 이름과 급여를 출력하시오.
*/
SELECT ename,sal from emp where sal > 2850; -- 메인
SELECT max (sal) from emp where deptno=30;  -- 서브

SELECT ename,sal from emp where sal > all(SELECT max (sal) from emp where deptno=30);

/*
 ANY 연산자는 메인 쿼리의 비교 조건이 서브 쿼리의 검색 결과와 하나 이상만 일치하면 참
 즉, 찾아진 값에서 가장 작은값(최소값)보다 크면 참이된다.

-- 부서번호가 30번인 사원들의 급여 중 가장 작은값 보다 많은 급여를 받는 사원의 이름과 급여를 출력하시오.
*/

SELECT min(sal) from emp WHERE deptno=30; -- 서브쿼리
SELECT ename,sal from emp;
SELECT ename,sal from emp where sal > any(SELECT min(sal) from emp WHERE deptno=30);